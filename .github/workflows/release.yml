name: Release

on:
  release:
    types: [released]

jobs:
  build-push-docker:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        project: [ mithril-aggregator, mithril-client, mithril-signer ]
    
    permissions:
      contents: read
      packages: write

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository_owner }}/${{ matrix.project }}
      DOCKER_FILE: ./${{ matrix.project }}/Dockerfile.ci
      CONTEXT: .
      GITHUB_REF: ${{ github.ref}}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            latest
            type=raw,value=${{ github.ref_name }}-{{sha}}

      - name: Download built artifacts (Linux-x64)
        uses: dawidd6/action-download-artifact@v2
        with:
          name: mithril-distribution-Linux-X64
          path: ${{ matrix.project }}
          commit: ${{ github.sha }}
          workflow: ci.yml
          workflow_conclusion: success

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: ${{ env.CONTEXT }}
          file: ${{ env.DOCKER_FILE }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
  
  check-deploy-crates-io:
    runs-on: ubuntu-22.04
    outputs:
      should-deploy: ${{ steps.check_version.outputs.should_deploy }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Check crate latest version
        id: check_version
        run: |
          LATEST_REMOTE_VERSION=$(wget -q -O - https://crates.io/api/v1/crates/mithril-stm | jq -r '.crate.newest_version')
          LOCAL_VERSION=$(cargo metadata --quiet --no-deps | jq -r '.packages[] | select(.name=="mithril-stm") | .version')
          echo "Latest crate.io version: $LATEST_REMOTE_VERSION"
          echo "Local version: $LOCAL_VERSION"

          if [ "$LOCAL_VERSION" != "$LATEST_REMOTE_VERSION" ]; then 
            echo "Local version is newer than remote version: we will publish to crates.io"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "Local version and remote version are the same: no need to publish to crates.io"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi
  
  deploy-crates-io:
    runs-on: ubuntu-22.04
    needs: check-deploy-crates-io
    if: needs.check-deploy-crates-io.outputs.should-deploy == 'true'
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Cargo publish dry run
        shell: bash
        run: cargo publish -p mithril-stm --dry-run

      - name: Cargo package list
        shell: bash
        run: cargo package -p mithril-stm --list

      - name: Cargo publish
        shell: bash
        run: cargo publish -p mithril-stm --token ${{ secrets.CRATES_IO_API_TOKEN }}

  deploy-release:
    strategy:
      fail-fast: false
      matrix:
        environment: [ release-preprod, release-mainnet ]
        include:
        - environment: release-preprod
          environment_prefix: release
          cardano_network: preprod
          mithril_api_domain: api.mithril.network
          mithril_protocol_parameters: |
            {
              k     = 5
              m     = 100
              phi_f = 0.65
            }
          mithril_signers: |
            {
              "2" = {
                type    = "verified",
                pool_id = "",
              },
            }
          terraform_backend_bucket: hydra-terraform-admin
          google_region: europe-west1
          google_zone: europe-west1-b
          google_machine_type: e2-highmem-2
          google_compute_instance_boot_disk_size: 200
          google_compute_instance_data_disk_size: 250
        - environment: release-mainnet
          environment_prefix: release
          cardano_network: mainnet
          mithril_api_domain: api.mithril.network
          mithril_protocol_parameters: |
            {
              k     = 2422
              m     = 20973
              phi_f = 0.20
            }
          mithril_signers: |
            {}
          terraform_backend_bucket: mithril-terraform-prod
          google_region: europe-west1
          google_zone: europe-west1-b
          google_machine_type: e2-highmem-8
          google_compute_instance_boot_disk_size: 250
          google_compute_instance_data_disk_size: 1000
          
    environment: ${{ matrix.environment }}
    runs-on: ubuntu-22.04
    needs:
      - build-push-docker
    defaults:
      run:
        working-directory: mithril-infra
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Get Docker image id
        run: echo "DOCKER_IMAGE_ID=${{ github.ref_name }}-$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV

      - name: Deploy terraform infrastructure
        uses: ./.github/workflows/actions/deploy-terraform-infrastructure
        with:
          dry_run: "false"
          terraform_backend_bucket: ${{ matrix.terraform_backend_bucket }}
          environment_prefix: ${{ matrix.environment_prefix }}
          environment: ${{ matrix.environment }}
          cardano_network: ${{ matrix.cardano_network }}
          google_region: ${{ matrix.google_region }}
          google_zone: ${{ matrix.google_zone }}
          google_machine_type: ${{ matrix.google_machine_type }}
          google_compute_instance_boot_disk_size: ${{ matrix.google_compute_instance_boot_disk_size }}
          google_compute_instance_data_disk_size: ${{ matrix.google_compute_instance_data_disk_size }}
          google_application_credentials: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          mithril_api_domain: ${{ matrix.mithril_api_domain }}
          mithril_image_id: ${{ env.DOCKER_IMAGE_ID }}
          mithril_protocol_parameters: ${{ toJSON(matrix.mithril_protocol_parameters) }}
          mithril_signers: ${{ toJSON(matrix.mithril_signers) }}
          mithril_genesis_verification_key_url: ${{ vars.GENESIS_VERIFICATION_KEY_URL }}
          mithril_era_reader_address_url: ${{ vars.ERA_READER_ADDRESS_URL }}
          mithril_era_reader_verification_key_url: ${{ vars.ERA_READER_VERIFICATION_KEY_URL }}
          mithril_aggregator_cdn_cname: ${{ vars.AGGREGATOR_CDN_CNAME }}
          mithril_aggregator_snapshot_use_cdn_domain: ${{ vars.AGGREGATOR_USE_CDN_DOMAIN }}
          mithril_aggregator_snapshot_compression_algorithm: ${{ vars.AGGREGATOR_SNAPSHOT_COMPRESSION_ALGORITHM }}
          mithril_aggregator_zstandard_parameters_level: ${{ vars.AGGREGATOR_SNAPSHOT_ZSTANDARD_LEVEL }}
          mithril_aggregator_zstandard_parameters_workers: ${{ vars.AGGREGATOR_SNAPSHOT_ZSTANDARD_WORKERS }}
          mithril_aggregator_cexplorer_pools_url: ${{ vars.AGGREGATOR_CEXPLORER_POOLS_URL }}
          prometheus_auth_username: ${{ secrets.PROMETHEUS_AUTH_USERNAME }}
          prometheus_auth_password: ${{ secrets.PROMETHEUS_AUTH_PASSWORD }}
          prometheus_ingest_host: ${{ vars.PROMETHEUS_INGEST_HOST }}
          prometheus_ingest_username: ${{ secrets.PROMETHEUS_INGEST_USERNAME }}
          prometheus_ingest_password: ${{ secrets.PROMETHEUS_INGEST_PASSWORD }}
          loki_auth_username: ${{ secrets.LOKI_AUTH_USERNAME }}
          loki_auth_password: ${{ secrets.LOKI_AUTH_PASSWORD }}
          loki_ingest_host: ${{ vars.LOKI_INGEST_HOST }}
          loki_ingest_username: ${{ secrets.LOKI_INGEST_USERNAME }}
          loki_ingest_password: ${{ secrets.LOKI_INGEST_PASSWORD }}
