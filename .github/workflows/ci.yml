name: CI

on:
  push:
    branches: # only run on branch push, tag push will be ignored
      - '**'
    paths-ignore: # ignore docs only changes since they use a dedicated workflows: docs.yml
      - 'docs/**'
      - 'mithril-explorer/**'

jobs:
  build-ubuntu-X64:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Build Mithril workspace & publish artifacts
        uses: ./.github/workflows/actions/build-upload-mithril-artifact
        with:
          cache-version: ${{ secrets.CACHE_VERSION }}

      - name: Publish End-to-end runner (${{ runner.os }}-${{ runner.arch }})
        uses: actions/upload-artifact@v3
        with:
          name: mithril-end-to-end-${{ runner.os }}-${{ runner.arch }}
          path: target/release/mithril-end-to-end
          if-no-files-found: error
  
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-12, windows-latest ]
        
        include:
        # Only build client on windows & mac
        - os: macos-12
          build-args: -p mithril-client
        - os: windows-latest
          build-args: -p mithril-client 
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      
      - name: Build Mithril workspace & publish artifacts
        uses: ./.github/workflows/actions/build-upload-mithril-artifact
        with:
          cache-version: ${{ secrets.CACHE_VERSION }}
          build-args: ${{ matrix.build-args }}
  
  test:
    strategy:
      fail-fast: false
      matrix:
        title: [ "mithril" ]
        os: [ ubuntu-22.04, macos-12, windows-latest ]
        
        include:
          - os: ubuntu-22.04
            build-args: --workspace
            test-args: --workspace --exclude mithril # mithril core is tested separately since it's slow
          - title: mithril-core
            os: ubuntu-22.04
            # Mithril core tests are ~2x faster on release build
            build-args: --release -p mithril
            test-args: --release -p mithril
            artifact-suffix: -mithril-core 
          # Only test client on windows & mac (since its the only binaries supported for those os for now)
          - os: macos-12
            build-args: -p mithril-client
            test-args: -p mithril-client
          - os: windows-latest
            build-args: -p mithril-client
            test-args: -p mithril-client
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-cache-v${{ secrets.CACHE_VERSION }}

      - name: Install cargo tools
        shell: bash
        run: |
          cargo install cargo2junit 2>/dev/null || true # Suppress the "binary `xyz` already exists in destination" error

      - name: Run tests
        shell: bash
        run: |
          set -o pipefail && \
          cargo test --features portable --no-fail-fast ${{ matrix.test-args }} \
              -- -Z unstable-options --format json --report-time \
              | tee >(cargo2junit > test-results${{ matrix.artifact-suffix }}-${{ runner.os }}-${{ runner.arch }}.xml)

      - name: Upload Tests Results
        uses: actions/upload-artifact@v3
        if: ${{ success() || failure() }}
        with:
          name: test-results${{ matrix.artifact-suffix }}-${{ runner.os }}-${{ runner.arch }}
          path: |
            ./**/test-results-*.xml
  
  check:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy, rustfmt
          override: true
      
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-cache-v${{ secrets.CACHE_VERSION }}

      - name: Install cargo tools
        if: ${{ steps.cargo-cache.outputs.cache-hit == false }}
        shell: bash
        run: |
          cargo install cargo-sort 2>/dev/null || true # Suppress the "binary `xyz` already exists in destination" error

      - name: Cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --release --all-targets

      - name: Clippy Check
        uses: actions-rs/clippy-check@v1
        with:
          name: clippy
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --all-targets --no-deps -- -D warnings

      - name: Cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --check

      - name: Cargo sort
        shell: bash
        run: cargo sort -w -c

  run-test-lab:
    runs-on: ubuntu-22.04
    needs: [ build-ubuntu-X64 ]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          name: mithril-distribution-${{ runner.os }}-${{ runner.arch }}
          path: ./bin

      - name: Download rust test runner
        uses: actions/download-artifact@v3
        with:
          name: mithril-end-to-end-${{ runner.os }}-${{ runner.arch }}
          path: ./

      - run: |
          chmod +x ./bin/mithril-aggregator
          chmod +x ./bin/mithril-client
          chmod +x ./bin/mithril-signer
          chmod +x ./mithril-end-to-end
          mkdir artifacts

      - name: Test
        run: ./mithril-end-to-end --bin-directory ./bin --work-directory=./artifacts --devnet-scripts-directory=./mithril-test-lab/mithril-devnet

      - name: Upload E2E Tests Artifacts
        if:  ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: mithril-e2e-tests-artifacts-run_${{ github.run_number }}-attempt_${{ github.run_attempt }}
          path: |
            ./artifacts/*
            # including node.sock makes the upload fails so exclude them:
            !./artifacts/**/node.sock
            # exclude cardano tools, saving ~50mb of data:
            !./artifacts/devnet/cardano-cli
            !./artifacts/devnet/cardano-node
          if-no-files-found: error
  
  publish-tests-results:
    if: ${{ success() || failure() }}
    runs-on: ubuntu-22.04
    needs: 
      - test
    steps:
      - name: Download Tests Results (${{ runner.os }}-${{ runner.arch }})
        if: ${{ success() || failure() }}
        uses: actions/download-artifact@v3
        with:
          name: test-results-${{ runner.os }}-${{ runner.arch }}

      - name: Download mithril-core Tests Results (${{ runner.os }}-${{ runner.arch }})
        if: ${{ success() || failure() }}
        uses: actions/download-artifact@v3
        with:
          name: test-results-mithril-core-${{ runner.os }}-${{ runner.arch }}

      - name: Download Tests Results (macOS-X64)
        if: ${{ success() || failure() }}
        uses: actions/download-artifact@v3
        with:
          name: test-results-macOS-X64

      - name: Download Tests Results (Windows-X64)
        if: ${{ success() || failure() }}
        uses: actions/download-artifact@v3
        with:
          name: test-results-Windows-X64

      - name: Publish Unit Test Results
        if: ${{ success() || failure() }}
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: ./**/test-results-*.xml

  docker-mithril:
    runs-on: ubuntu-22.04
    needs:
      - build
      - check
      - test
      - run-test-lab
    strategy:
      fail-fast: false
      matrix:
        project: [ mithril-aggregator, mithril-client, mithril-signer ]
    
    permissions:
      contents: read
      packages: write

    env:
      PUSH_PACKAGES: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository_owner }}/${{ matrix.project }}
      DOCKER_FILE: ./${{ matrix.project }}/Dockerfile.ci
      CONTEXT: .
      GITHUB_REF: ${{ github.ref}}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            unstable
            type=raw,value={{branch}}-{{sha}}

      - name: Download built artifacts
        uses: actions/download-artifact@v3
        with:
          name: mithril-distribution-${{ runner.os }}-${{ runner.arch }}
          path: ${{ matrix.project }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: ${{ env.CONTEXT }}
          file: ${{ env.DOCKER_FILE }}
          push: ${{ env.PUSH_PACKAGES }}
          tags: ${{ steps.meta.outputs.tags }}

  unstable-release:
    runs-on: ubuntu-22.04
    needs:
      - build
      - test
      - run-test-lab
      - check
    steps:
      - name: Download built artifacts (${{ runner.os }}-${{ runner.arch }})
        uses: actions/download-artifact@v3
        with:
          name: mithril-distribution-${{ runner.os }}-${{ runner.arch }}
          path: ./build

      - name: Download built artifacts (macOS-X64)
        uses: actions/download-artifact@v3
        with:
          name: mithril-distribution-macOS-X64
          path: ./build

      - name: Download built artifacts (Windows-X64)
        uses: actions/download-artifact@v3
        with:
          name: mithril-distribution-Windows-X64
          path: ./build

      - name: Update unstable release
        if: github.ref == 'refs/heads/main'
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: unstable
          prerelease: true
          title: Unstable Development Builds
          files: build/*

  terraform:
    runs-on: ubuntu-22.04
    needs:
      - docker-mithril
    env:
      # Contains a JSON-formatted service account key
      GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      # Contains a RSA private key
      GCLOUD_PRIVATE_KEY: ${{ secrets.GCLOUD_PRIVATE_KEY }}
      GENESIS_SECRET_KEY: ${{ secrets.TEST_ONLY_GENESIS_SECRET_KEY }}
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

    defaults:
      run:
        working-directory: mithril-infra

    steps:
    - name: Checkout sources
      uses: actions/checkout@v3

    - name: Get short SHA
      id: slug
      run: echo "sha8=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: Init Terraform
      run: terraform init

    - name: Check Terraform
      run: terraform fmt -check

    - name: Terraform Plan
      run: |
        terraform plan -var "image_id=${{ env.BRANCH_NAME }}-${{ steps.slug.outputs.sha8 }}" -var 'private_key=${{ env.GCLOUD_PRIVATE_KEY }}' -var 'google_application_credentials_json=${{ env.GOOGLE_CREDENTIALS }}' -var 'genesis_secret_key=${{ env.GENESIS_SECRET_KEY }}'

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: |
        terraform apply -auto-approve -var "image_id=${{ env.BRANCH_NAME }}-${{ steps.slug.outputs.sha8 }}" -var 'private_key=${{ env.GCLOUD_PRIVATE_KEY }}' -var 'google_application_credentials_json=${{ env.GOOGLE_CREDENTIALS }}' -var 'genesis_secret_key=${{ env.GENESIS_SECRET_KEY }}'
